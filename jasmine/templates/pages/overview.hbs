<h1>Unit testing makes your life easier</h1>
<p>
  It really truly does, unit testing and test driven development have saved my skin many a time.
  If you're wondering what a unit test is, simply put it is a test of a specific part (or unit)
  of the code that ensure's the outcome of running the code is as expected in a specific scenario.
  For example. If the code is asked to calculate 2 + 2 it gives the answer 4, or if the code
  is given myself and has to determine how cool I am it of course response 'ultra super mega awesomely kewl'
  (this is obviously true as I made an intentional spelling error, thug life!).
</p>
<h2>Test driven development - let the tests show you the way</h2>
<p>
  Test driven development is a mentality, a way of being and a way to slam out awesome code. Oh you want to know how?
  Here it is.


  Step one: Write test, execute test, test get's angry and fails.
  Step two: Write the minimum amount of code that makes the test pass, execute the test, it passes, hooray!
  Step three: Run all the tests you've got, if any fail then go back to step one (yes, I just used a goto, get over it!)
  Step four: If necessary tinker at some refactoring to make your code more readable!
  Step five: Write enough tests to prove your code works all the time

  If you ever get past step five you are an ultimate mega lord of engineering or this article is out of date and
  there is some lovely library that does this for you, either way kudos!
</p>
<h2>Why unit test?</h2>
<p>
  Unit testing will be your saviour and test driven development your morning mantra. But hey, you don't believe
  and that's cool, as a pragmatic engineer I wouldn't expect you to. So let me tell you for why!
</p>
<h3>Stability of the code</h3>
<p>
  Obviously
</p>
<h3>Speed of writing</h3>
<h3>Stop nasty regression</h3>
<h2>What should I unit test?</h2>
<h2>How do I run unit tests?</h2>
